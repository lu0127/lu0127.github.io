<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/02/27/%E8%AE%A4%E8%AF%81%E6%96%B9%E6%A1%88/"/>
    <url>/2021/02/27/%E8%AE%A4%E8%AF%81%E6%96%B9%E6%A1%88/</url>
    
    <content type="html"><![CDATA[<hr><h2 id="jwt-和-session-认证方案"><a href="#jwt-和-session-认证方案" class="headerlink" title="jwt 和 session 认证方案"></a>jwt 和 session 认证方案</h2><h2 id="1-不同开发模式下的身份认证"><a href="#1-不同开发模式下的身份认证" class="headerlink" title="1.不同开发模式下的身份认证"></a>1.不同开发模式下的身份认证</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs 1">1.服务器渲染推荐使用session认证机制<br> 2.前后端分离推荐使用jwt认证机制<br></code></pre></td></tr></table></figure><h2 id="2-session认证机制"><a href="#2-session认证机制" class="headerlink" title="2.session认证机制"></a>2.session认证机制</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs 2">1.http协议的无状态性<br>客户端每次http请求都是独立的,连续多个请求之间没有直接关系,服务器不会主动保留每次http的请求的状态<br><br>2.如何突破http无状态性<br>使用cookie的方式进行身份认证,不同域名下的cookie都是不同的,每当客户端发送请求时,会自动把当前域名下所有未过期的cookie一同发送到服务器<br><br><br><br></code></pre></td></tr></table></figure><h2 id="3-什么是cookie和他的特性"><a href="#3-什么是cookie和他的特性" class="headerlink" title="3.什么是cookie和他的特性"></a>3.什么是cookie和他的特性</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs 3">cookie是储存于浏览器中一般不超过4kb的字符串,又一个name名称,一个value值和其他几个用于控制Cookie有效期,安全性,使用范围的可选属性组成的.<br>1.自动发送<br>2.域名独立<br>3.过期时限<br>4.4kb 限制<br></code></pre></td></tr></table></figure><h2 id="4-cookie在身份认证中的作用"><a href="#4-cookie在身份认证中的作用" class="headerlink" title="4.cookie在身份认证中的作用"></a>4.cookie在身份认证中的作用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 4">客户端第一次请求服务器的时候,服务器通过响应头的形式,向客户端发送一个身份认证的cookie,客户端会自动将cookie存在浏览器中. 之后当客户端每次请求服务器的时候,浏览器会自动将身份认证相关的cookie通过请求的形式发送给服务器,服务器即可验明客户端的身份.<br></code></pre></td></tr></table></figure><h2 id="5-cookie不具有安全性"><a href="#5-cookie不具有安全性" class="headerlink" title="5.cookie不具有安全性"></a>5.cookie不具有安全性</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs 5">由于 Cookie 是存储在浏览器中的，而且浏览器也提供了读写 Cookie 的 API，因此 Cookie 很容易被伪造，不具有安全<br>性。因此不建议服务器将重要的隐私数据，通过 Cookie 的形式发送给浏览器。<br><br></code></pre></td></tr></table></figure><h2 id="6-session认证的代码使用方式"><a href="#6-session认证的代码使用方式" class="headerlink" title="6.session认证的代码使用方式"></a>6.session认证的代码使用方式</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//安装express-session 中间件 npm i 装 express-session</span><br><span class="hljs-comment">//导入express-session中间件</span><br><span class="hljs-keyword">const</span> express =requrie(<span class="hljs-string">&#x27;express)</span><br><span class="hljs-string">const session =require(&#x27;</span>express-session<span class="hljs-string">&#x27;)</span><br><span class="hljs-string">const app =express()</span><br><span class="hljs-string">//配置session中间件</span><br><span class="hljs-string">app.use(session(&#123;</span><br><span class="hljs-string">    secret:&#x27;</span>key<span class="hljs-string">&#x27;  // secret可以写任何字符串属性</span><br><span class="hljs-string">    resave: false,  </span><br><span class="hljs-string">    saveUninitialized: true,</span><br><span class="hljs-string">&#125;))</span><br><span class="hljs-string">//但session中间配置完成过后可以通过req.session来访问和使用session对象 从而储存用户的关键信息</span><br><span class="hljs-string">app.post(&#x27;</span>/api/login<span class="hljs-string">&#x27;,(req,res)=&gt;&#123;</span><br><span class="hljs-string">    if(req.body.username==&#x27;</span>damin<span class="hljs-string">&#x27; || req.body.password==&#x27;</span><span class="hljs-number">000000</span><span class="hljs-string">&#x27;)&#123;</span><br><span class="hljs-string">        return res.send(&#123;status:1,msg:&#x27;</span>登录失败<span class="hljs-string">&#x27;&#125;)</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">    req.session.user=req.body //将用户的信息,存到session中</span><br><span class="hljs-string">    req.session.isLogin =true //将用户的登录状态 存到session中</span><br><span class="hljs-string">    res.send(&#123;status:0,msg:&#x27;</span>登录成功<span class="hljs-string">&#x27;&#125;)</span><br><span class="hljs-string">&#125;)</span><br><span class="hljs-string"></span><br><span class="hljs-string">//可以从req.session对象上获取之前的数据</span><br><span class="hljs-string">app.get(&#x27;</span>/api/username<span class="hljs-string">&#x27;,(req,res)=&gt;&#123;</span><br><span class="hljs-string">    if(!req.session.isLogin)&#123;</span><br><span class="hljs-string">        return res.send(&#123;status:1,msg:&#x27;</span>未登录<span class="hljs-string">&#x27;&#125;)</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">    res.send(&#123;status:0,mes:&#x27;</span>登陆成功<span class="hljs-string">&#x27;,username:req.session.user.username&#125;)</span><br><span class="hljs-string">&#125;)</span><br><span class="hljs-string"></span><br><span class="hljs-string">//退出的时候可以调用res.session.destory()函数,即可清除服务器中保存的session信息</span><br><span class="hljs-string">app.post(&#x27;</span>/api/loginout<span class="hljs-string">&#x27;,(req,res)=&gt;&#123;</span><br><span class="hljs-string">    req.session.destory()</span><br><span class="hljs-string">    res.send(&#123;</span><br><span class="hljs-string">        status:0,</span><br><span class="hljs-string">        msg:&#x27;</span>退出登录成功<span class="hljs-string">&#x27;</span><br><span class="hljs-string">    &#125;)    </span><br><span class="hljs-string">&#125;)</span><br></code></pre></td></tr></table></figure><h2 id="7-什么是JWT认证-它的原理"><a href="#7-什么是JWT认证-它的原理" class="headerlink" title="7.什么是JWT认证 它的原理"></a>7.什么是JWT认证 它的原理</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs 6">JWT是目前最流行的跨域认证解决方案<br>用户信息通过Token字符串的形式,保存在客户端浏览器中.服务器通过还原Token字符串的方式来认证用户的身份<br></code></pre></td></tr></table></figure><h2 id="8-JWT-的组成部分"><a href="#8-JWT-的组成部分" class="headerlink" title="8.JWT 的组成部分"></a>8.JWT 的组成部分</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//WT 通常由三部分组成，分别是 Header（头部）、Payload（有效荷载）、Signature（签名）。</span><br><span class="hljs-comment">// 三者之间使用&#x27;.&#x27;分割</span><br> Header.Payload.Signature<br><span class="hljs-comment">//Payload 部分才是真正的用户信息，它是用户信息经过加密之后生成的字符串</span><br><span class="hljs-comment">//Header 和 Signature 是安全性相关的部分，只是为了保证 Token 的安全性。</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/02/24/sql%E5%91%BD%E4%BB%A4/"/>
    <url>/2021/02/24/sql%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<hr><p>从user表中查询所有列的数据   select * from 表名称<br>    select * from user;</p><p>从user表中查询username和password列中的数据  select 列名称1,列名称2 from 表名称<br>    select username,password from user;</p><p>在user表中插入username为lt,password为123456的数据  insert into uesr (列1,列2) values (‘值1’,’值2’)<br>    insert into user (username,password,status) values (‘lt3’,’123456’,1);<br>    select * from user;</p><p>在user表中将id为4的用户的,username和password的值更新改变   uplate 表名 set 列1=值1, 列2=值2 where id=值<br>    update user set username=’ll22’, password=’111111’, status=0 where id=4<br>    update user set password=’000000’ where username=’wf’</p><pre><code>delete from 表名 where 列名称=值delete from user where id=1 ;select * from user;</code></pre><p>演示where字句的运用<br>用户限定选择标准,可以使用运算符来选择标准<br>    &lt;,&gt;,!=,=,&lt;=&lt;,&gt;=,between在某个值范围内,like搜索某种模式</p><pre><code>select * from user where id=2select * from user where username = &#39;xws&#39;select * from user where id&gt;=3select * from user where id between 2 and 4select * from user where &#39;username&#39; like &#39;%c%&#39;</code></pre><p>AND 和 OR 可在 WHERE 子语句中把两个或多个条件结合起来。AND 表示必须同时满足多个条件,OR 表示只要满足任意一个条件即可，<br>    select * from user where status=0 and id&gt;3<br>    select * from user where status=0 or id&gt;4 </p><p>对user表的数据进行排序 order by     asc为默认的升序排序  desc表示降序排序<br>    select * from user order by status desc;<br>    where 子语句需要写再order by前面<br>    select *from user where id&gt;3 order by id desc;</p><p>对user表的数据进行status降序之后根据username进行升序<br>    select * from user order by status desc, username  </p><hr>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/01/29/taotao/"/>
    <url>/2021/01/29/taotao/</url>
    
    <content type="html"><![CDATA[<hr><p>title:搭建<br>data:2021-01-28 20:34:00<br>tags:[blog,hello]<br>categories:搭建博客</p><hr>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/01/29/hello-world/"/>
    <url>/2021/01/29/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
